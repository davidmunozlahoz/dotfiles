### OPERATORS SNIPPETS ###

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

# // -> \frac{}{}
context "math()"
snippet // "Fraction" iA
\\frac{${VISUAL}$1}{$2}$0
endsnippet

# dx 	-> \dfrac{\d }{\d x}
# d 	-> \dfrac{\d }{\d }
context "math()"
snippet "\bd([a-zA-Z])" "Derivative" r
\frac{d ${1:${VISUAL}}}{d `!p snip.rv = match.group(1)`}$0
endsnippet

# pdx -> \dfrac{\partial }{\partial x}
# pd 	-> \dfrac{\partial }{\partial }
context "math()"
snippet "\bpd([a-zA-Z])" "Partial Derivative" r
\frac{\partial ${1:${VISUAL}}}{\partial `!p snip.rv = match.group(1)`}$0
endsnippet

# sumx 	-> \sum_{x=1}^{\infty}
# sum 	-> \sum_{i=1}^{\infty}
context "math()"
snippet "\\?\bsum([a-zA-Z]?)" "Sum" r
\sum_{${1:`!p snip.rv = match.group(1) or 'i'`}=${2:1}}^{${3:\infty}}$0
endsnippet

# prodx -> \prod_{x=1}^{\infty}
# prod 	-> \prod_{i=1}^{\infty}
context "math()"
snippet "\\?\bprod([a-zA-Z]?)" "Product" r
\prod_{${1:`!p snip.rv = match.group(1) or 'i'`}=${2:1}}^{${3:\infty}}$0
endsnippet

# limy 	-> \lim\limits_{y \to \infty}
# lim 	-> \lim\limits_{x \to \infty}
context "math()"
snippet "\\?\blim([a-zA-Z]?)" "Limit" r
\lim_{${1:`!p snip.rv = match.group(1) or 'x'`} \to ${2:\infty}}$0
endsnippet

context "math()"
snippet "\\?\blimsup([a-zA-Z]?)" "Limsup" r
\limsup_{${1:`!p snip.rv = match.group(1) or 'x'`} \to ${2:\infty}}$0
endsnippet

context "math()"
snippet "\\?\bliminf([a-zA-Z]?)" "Liminf" r
\liminf{${1:`!p snip.rv = match.group(1) or 'x'`} \to ${2:\infty}}$0
endsnippet

context "math()"
snippet int "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet
